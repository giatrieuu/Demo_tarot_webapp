import React, { useEffect, useRef, useState } from "react";
import { Calendar, Badge, Typography, Spin, message } from "antd";
import type { Dayjs } from "dayjs";
import type { BadgeProps } from "antd";
import { useSelector } from "react-redux";
import { RootState } from "../../../../redux/store";
import dayjs from "dayjs";
import TimeSlotModal from "./TimeSlotModal";
import {
  createWorkSchedule,
  fetchWorkScheduleByReaderId,
} from "../../../../services/tarotReaderServices";

const { Title } = Typography;

const CreateTimeToBook: React.FC = () => {
  const userId = useSelector((state: RootState) => state.auth.userId);
  const [freeTimeSlots, setFreeTimeSlots] = useState<
    Record<string, { start: string; end: string }[]>
  >({});
  const [loading, setLoading] = useState<boolean>(false);
  const [selectedDate, setSelectedDate] = useState<string>("");

  const [modalVisible, setModalVisible] = useState(false);
  const [timeRange, setTimeRange] = useState<[Dayjs | null, Dayjs | null]>([
    null,
    null,
  ]);

  // üü¢ Fetch L·ªãch L√†m Vi·ªác Khi Component Mount
  useEffect(() => {
    if (!userId) return;
    setLoading(true);

    fetchWorkScheduleByReaderId(userId)
      .then((data) => {
        const formattedData: Record<string, { start: string; end: string }[]> =
          {};
        data.forEach((schedule: any) => {
          const date = schedule.workDate.split("T")[0];
          if (!formattedData[date]) formattedData[date] = [];
          formattedData[date].push({
            start: schedule.startTime,
            end: schedule.endTime,
          });
        });

        setFreeTimeSlots(formattedData);
      })
      .catch(() => message.error("Kh√¥ng th·ªÉ t·∫£i l·ªãch l√†m vi·ªác"))
      .finally(() => setLoading(false));
  }, [userId]);

  // üü° Hi·ªÉn th·ªã l·ªãch l√†m vi·ªác tr√™n t·ª´ng √¥ l·ªãch
  const getListData = (value: Dayjs) => {
    const dateString = value.format("YYYY-MM-DD");
    return (
      freeTimeSlots[dateString]?.map((slot) => ({
        type: "success",
        content: `üïí ${slot.start} - ${slot.end}`,
      })) || []
    );
  };

  // üü° Render d·ªØ li·ªáu l√™n Calendar
  const dateCellRender = (value: Dayjs) => {
    const listData = getListData(value);
    const isPast = value.isBefore(dayjs(), "day");

    return (
      <ul
        className={`events ${isPast ? "opacity-50 pointer-events-none" : ""}`}
      >
        {listData.map((item, index) => (
          <li key={index}>
            <Badge
              status={item.type as BadgeProps["status"]}
              text={item.content}
            />
          </li>
        ))}
      </ul>
    );
  };

  // üü° Ch·∫∑n ch·ªçn ng√†y trong qu√° kh·ª© ho·∫∑c xa qu√° 3 ng√†y
  const disabledDate = (current: Dayjs) => {
    const today = dayjs();
    const maxDate = today.add(2, "day");
    return current.isBefore(today, "day") || current.isAfter(maxDate, "day");
  };

  // üü¢ Khi ch·ªçn ng√†y, m·ªü modal
  const onSelectDate = (value: Dayjs) => {
    if (disabledDate(value)) return;
    setSelectedDate(value.format("YYYY-MM-DD"));
    setTimeRange([null, null]);
    setModalVisible(true);
  };

  const isSavingRef = useRef(false); // üõë Tr√°nh g·ªçi API nhi·ªÅu l·∫ßn

  const handleSaveTimeSlot = async () => {
    if (isSavingRef.current) return; // N·∫øu ƒëang x·ª≠ l√Ω API, kh√¥ng g·ªçi l·∫°i
    isSavingRef.current = true; // ƒê√°nh d·∫•u ƒëang g·ªçi API

    if (!selectedDate || !timeRange[0] || !timeRange[1]) {
      message.error("Vui l√≤ng ch·ªçn kho·∫£ng th·ªùi gian h·ª£p l·ªá.");
      isSavingRef.current = false; // ‚úÖ Reset flag
      return;
    }

    if (!userId) {
      message.error("Kh√¥ng th·ªÉ t·∫°o l·ªãch: Thi·∫øu th√¥ng tin Reader ID.");
      isSavingRef.current = false; // ‚úÖ Reset flag
      return;
    }

    const start = timeRange[0].format("HH:mm:ss");
    const end = timeRange[1].format("HH:mm:ss");

    try {
      await createWorkSchedule({
        readerId: userId,
        workDate: selectedDate,
        startTime: start,
        endTime: end,
        status: "Available",
        description: "Ca l√†m vi·ªác",
      });

      setFreeTimeSlots((prev) => ({
        ...prev,
        [selectedDate]: [...(prev[selectedDate] || []), { start, end }],
      }));

      setModalVisible(false);
      message.success(`ƒê√£ l∆∞u th·ªùi gian l√†m vi·ªác: ${start} - ${end}`);
    } catch (error) {
      console.error("L·ªói API:", error);
      message.error("Kh√¥ng th·ªÉ l∆∞u th·ªùi gian l√†m vi·ªác, vui l√≤ng th·ª≠ l·∫°i.");
    }

    isSavingRef.current = false; // ‚úÖ Reset flag sau khi ho√†n th√†nh
  };
  return (
    <div className="p-6 bg-white min-h-screen">
      <Title level={3} className="text-center text-black">
        üìÖ L·ªãch R·∫£nh c·ªßa B·∫°n
      </Title>
      <div className="bg-white p-4 rounded-lg shadow-lg">
        {loading ? (
          <div className="flex justify-center py-10">
            <Spin size="large" />
          </div>
        ) : (
          <Calendar
            cellRender={dateCellRender}
            onSelect={onSelectDate}
            disabledDate={disabledDate}
          />
        )}
      </div>

      <TimeSlotModal
        visible={modalVisible}
        selectedDate={selectedDate}
        timeRange={timeRange}
        setTimeRange={setTimeRange}
        existingSlots={selectedDate ? freeTimeSlots[selectedDate] || [] : []}
        onClose={() => setModalVisible(false)}
        onSave={handleSaveTimeSlot}
      />
    </div>
  );
};

export default CreateTimeToBook;
