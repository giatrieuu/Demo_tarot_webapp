import React, { useEffect, useState } from "react";
import { Form, Input, Button, Upload, Modal, message } from "antd";
import { UploadOutlined } from "@ant-design/icons";
import ReactQuill from "react-quill";
import "react-quill/dist/quill.snow.css";
import { createPost, updatePost } from "../../../../../services/blogServices";
import { useSelector } from "react-redux";
import { RootState } from "../../../../../redux/store";

interface PostFormProps {
  visible: boolean;
  onClose: () => void;
  onSuccess: (newPost: any) => void;
  initialValues?: any; // N·∫øu c√≥ gi√° tr·ªã n√†y th√¨ l√† edit
}

const PostForm: React.FC<PostFormProps> = ({
  visible,
  onClose,
  onSuccess,
  initialValues,
}) => {
  const [form] = Form.useForm();
  const [loading, setLoading] = useState<boolean>(false); // üü° Th√™m state loading
  const isEdit = !!initialValues;
  const userId = useSelector((state: RootState) => state.auth.userId) || ""; // ‚úÖ ƒê·∫£m b·∫£o lu√¥n l√† string

  useEffect(() => {
    if (initialValues) {
      form.setFieldsValue({
        title: initialValues.title,
        text: initialValues.text,
        content: initialValues.content,
      });
    }
  }, [initialValues, form]);

  const handleSubmit = async (values: any) => {
    if (!userId) {
      message.error("Kh√¥ng t√¨m th·∫•y User ID, vui l√≤ng ƒëƒÉng nh·∫≠p l·∫°i!");
      return;
    }

    setLoading(true);
    try {
      const imageFile = values?.image?.originFileObj;

      if (isEdit) {
        await updatePost(
          initialValues.id,
          values.title,
          values.text,
          values.content,
          imageFile
        );
        message.success("C·∫≠p nh·∫≠t b√†i vi·∫øt th√†nh c√¥ng!");
      } else {
        // üü¢ N·∫øu l√† ch·∫ø ƒë·ªô t·∫°o: g·ªçi API create
        await createPost(
          userId, // ‚úÖ B√¢y gi·ªù userId lu√¥n l√† string
          values.title,
          values.text,
          values.content,
          imageFile
        );
        message.success("T·∫°o b√†i vi·∫øt th√†nh c√¥ng!");
      }

      form.resetFields();
      onSuccess(values);
      onClose();
    } catch (error) {
      message.error(isEdit ? "C·∫≠p nh·∫≠t th·∫•t b·∫°i!" : "T·∫°o th·∫•t b·∫°i!");
    } finally {
      setLoading(false);
    }
  };

  return (
    <Modal
      title={isEdit ? "üìù Ch·ªânh S·ª≠a B√†i Vi·∫øt" : "üìù T·∫°o B√†i Vi·∫øt M·ªõi"}
      open={visible}
      onCancel={onClose}
      footer={null}
      width={700}
    >
      <Form
        form={form}
        layout="vertical"
        onFinish={handleSubmit}
        initialValues={initialValues}
      >
        {/* Ti√™u ƒë·ªÅ */}
        <Form.Item
          label="Ti√™u ƒë·ªÅ"
          name="title"
          rules={[{ required: true, message: "Vui l√≤ng nh·∫≠p ti√™u ƒë·ªÅ" }]}
        >
          <Input placeholder="Nh·∫≠p ti√™u ƒë·ªÅ b√†i vi·∫øt" />
        </Form.Item>

        {/* N·ªôi dung ng·∫Øn */}
        <Form.Item
          label="N·ªôi dung ng·∫Øn"
          name="text"
          rules={[{ required: true, message: "Vui l√≤ng nh·∫≠p n·ªôi dung ng·∫Øn" }]}
        >
          <Input.TextArea placeholder="Nh·∫≠p n·ªôi dung ng·∫Øn" rows={3} />
        </Form.Item>

        {/* N·ªôi dung ch√≠nh (ReactQuill) */}
        <Form.Item
          label="N·ªôi dung chi ti·∫øt"
          name="content"
          rules={[
            { required: true, message: "Vui l√≤ng nh·∫≠p n·ªôi dung chi ti·∫øt" },
          ]}
        >
          <ReactQuill theme="snow" />
        </Form.Item>

        {/* H√¨nh ·∫£nh */}
        <Form.Item
          label="·∫¢nh ƒë·∫°i di·ªán"
          name="image"
          valuePropName="file"
          getValueFromEvent={(e) => e?.fileList?.[0]} // L·∫•y file t·ª´ event
        >
          <Upload
            maxCount={1}
            listType="picture"
            beforeUpload={() => false} // Kh√¥ng upload t·ª± ƒë·ªông
          >
            <Button icon={<UploadOutlined />}>Ch·ªçn ·∫£nh</Button>
          </Upload>
        </Form.Item>

        {/* N√∫t */}
        <div className="flex justify-end gap-3">
          <Button onClick={onClose} disabled={loading}>
            H·ªßy
          </Button>
          <Button type="primary" htmlType="submit" loading={loading}>
            {loading ? "ƒêang x·ª≠ l√Ω..." : isEdit ? "C·∫≠p nh·∫≠t" : "T·∫°o"}
          </Button>
        </div>
      </Form>
    </Modal>
  );
};

export default PostForm;
